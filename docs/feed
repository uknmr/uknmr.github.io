<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <description>Yu KANAMORI aka @uknmr&#39;s website.</description>
    <link href="https://uknmr.github.io/"/>
    <title>uknmr</title>
    <updated>2019-07-17T17:27:00-00:00</updated>
        
        <entry>
            <title>11ty でブログをつくった</title>
            <link href="https://uknmr.github.io/blog/made-a-blog-with-11ty.html"/>
            <updated>2019-04-21T11:07:33.107-00:00</updated>
            <id>https://uknmr.github.io/blog/made-a-blog-with-11ty.html</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;https://atnd.org/groups/bitvalleyinside&quot;&gt;BIT VALLEY INSIDE&lt;/a&gt; で&lt;a href=&quot;https://tkdn.github.io/slides/2019-04-17-frontend-learn-and-delegation/dist/&quot;&gt;同僚の話&lt;/a&gt;を聞いていたら自分もたまらなく何かを出したくなってしまってブログをつくった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sarasoueidan.com/desk/just-write/&quot;&gt;Just write.&lt;/a&gt; や&lt;a href=&quot;https://daverupert.com/2019/04/some-unsolicited-blogging-advice/&quot;&gt;おせっかいなブログアドバイス&lt;/a&gt;の影響も少なからずあって、吐き出す場所を探していたものある。&lt;br&gt;
ほぼブックマークであり、外付けの脳と化している &lt;a href=&quot;https://scrapbox.io/uknmr/&quot;&gt;Scrapbox&lt;/a&gt; でもよかったんだけど、つくりたかったんだよね。&lt;/p&gt;
&lt;p&gt;また、&lt;a href=&quot;https://www.notion.so/&quot;&gt;Notion&lt;/a&gt; という選択肢も頭にはあったが、とにかく手を動かしたかった。&lt;/p&gt;
&lt;p&gt;静的サイトジェネレーターとして &lt;a href=&quot;http://11ty.io/&quot;&gt;Eleventy&lt;/a&gt;（以下 11ty）をつかっている。&lt;/p&gt;
&lt;h1&gt;なぜ 11ty を選んだのか&lt;/h1&gt;
&lt;p&gt;端から 11ty にしようと決めていた。&lt;/p&gt;
&lt;p&gt;&lt;s&gt;Hugo や Gatsby でもよかったんだけど、ぱっと見は単純そうで、複数のテンプレート言語に対応、しかも組み合わせてつかえる謎仕様もあって気になっていた。&lt;/s&gt;&lt;br&gt;
なんか書いてみたけど、目にする機会が多かったのと「いいぞ！」みたいな記事をよくみたからだと思う。&lt;/p&gt;
&lt;p&gt;名前かっこいいよね「11ty」。&lt;/p&gt;
&lt;p&gt;JavaScript をテンプレート言語としてつかうことができちゃって、つまり React で書くこともできる。最高かよ。&lt;/p&gt;
&lt;p&gt;あとはフロントエンドエンジニアの端くれとして JAMstack の何かをつくっておきたかった感もあるし、どうせなら普段つかわないものをつかおうと思ったのもある。&lt;/p&gt;
&lt;h1&gt;選んでみて&lt;/h1&gt;
&lt;p&gt;しっかりしたドキュメントがあるので特に何も書くことはないんだけど、
簡単に最小限の設定で始められて（むしろ、&lt;a href=&quot;https://www.11ty.io/docs/resources/#zero-config&quot;&gt;0C&lt;/a&gt; でもいける）、必要あればしっかり拡張できるところがすごく気にいった。&lt;/p&gt;
&lt;p&gt;まだつかいはじめたばかりだけど、とてもいいものですね！みたいな感想しかない。&lt;/p&gt;
&lt;h1&gt;ほかにやったこと&lt;/h1&gt;
&lt;p&gt;CSS は &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind CSS&lt;/a&gt; をつかっている。時期尚早なコンポーネント化に疲れてしまっているので、命名に時間を割かれないユーティリティ CSS 以外を選ぶ気はしない。&lt;/p&gt;
&lt;p&gt;CSS は CLI でビルドするんだけど、はじめてデプロイにかかった時間やファイルサイズなどを可視化してみた。&lt;br&gt;
周辺ライブラリが揃ってて &lt;a href=&quot;https://www.npmjs.com/package/pretty-hrtime&quot;&gt;pretty-hrtime&lt;/a&gt; や &lt;a href=&quot;https://www.npmjs.com/package/bytes&quot;&gt;bytes&lt;/a&gt;、&lt;a href=&quot;https://www.npmjs.com/package/chalk&quot;&gt;chalk&lt;/a&gt; あたりのお世話になった。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; startTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hrtime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; filename &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; minifiedCSS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildCSS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prettyTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;prettyHrtime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hrtime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;🎉&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Finished in&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; chalk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bold&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prettyTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;📦&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Size:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; chalk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bold&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minifiedCSS&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;💾&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Saved to&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; chalk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bold&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;_includes/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;filename&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.min.css&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;フォントは &lt;span class=&quot;font-sans font-bold&quot;&gt;&lt;a href=&quot;https://fonts.google.com/specimen/Noto+Sans+JP&quot;&gt;Noto Sans JP Black&lt;/a&gt;&lt;/span&gt; と &lt;a href=&quot;https://fonts.google.com/specimen/Noto+Serif+JP&quot;&gt;Noto Serif JP&lt;/a&gt; を読み込んでいる。Google Fonts は font-display に対応していないので、&lt;a href=&quot;https://googlefonts.3perf.com/&quot;&gt;PerfPerfPerf に置いてあったスニペット&lt;/a&gt;をつかっている。&lt;/p&gt;
&lt;p&gt;11ty のビルドは CircleCI でやってる。&lt;br&gt;
&lt;a href=&quot;https://circleci.com/docs/2.0/local-cli/&quot;&gt;CircleCI の Local CLI&lt;/a&gt; は初めてつかったが驚くほど便利だった。なぜ私はいままでこれをつかわないで &lt;code&gt;commit --amend&lt;/code&gt; からの &lt;code&gt;push --force&lt;/code&gt; を繰りかえしていたんだろう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/articles/user-organization-and-project-pages#user-and-organization-pages-sites&quot;&gt;User Pages は master を見る&lt;/a&gt;という縛りに困惑したが &lt;a href=&quot;https://qiita.com/kwappa/items/03ffdeb89039a7249619&quot;&gt;@kwappa さんの記事&lt;/a&gt; で解決した。GitHub のデフォルトブランチを &lt;code&gt;gh-pages&lt;/code&gt; にした上で、 &lt;code&gt;docs/&lt;/code&gt; をルートとして master に subtree を push することで解決した。&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; subtree push --prefix docs/ origin master&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;参考記事&lt;/h1&gt;
&lt;p&gt;とくに参考にしたわけでもないのに、昔から見ている &lt;a href=&quot;https://hail2u.net/&quot;&gt;hail2u&lt;/a&gt; さんや &lt;a href=&quot;http://kotarok.com/&quot;&gt;kotarok&lt;/a&gt; さん、&lt;a href=&quot;https://www.sarasoueidan.com/&quot;&gt;Sara Soueidan&lt;/a&gt; さんの影響が強いなぁと感じる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://circleci.com/docs/2.0/yarn/&quot;&gt;Using Yarn (the npm replacement) on CircleCI - CircleCI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.frederikring.com/articles/deploying-github-pages-circle-ci/&quot;&gt;Deploying to GitHub Pages using Circle CI 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://t32k.me/mol/log/hugo-circleci-ghpages-2018/&quot;&gt;CircleCIでHugoを実行してGitHub Pagesにデプロイ - MOL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qiita.com/kwappa/items/03ffdeb89039a7249619&quot;&gt;GitHub PagesのUser Pagesでドキュメントルートを変更するにはmasterを殺す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
        
        <entry>
            <title>Google Fonts が font-display に対応する 🎉</title>
            <link href="https://uknmr.github.io/blog/google-fonts-supports-font-display.html"/>
            <updated>2019-05-11T06:18:00-00:00</updated>
            <id>https://uknmr.github.io/blog/google-fonts-supports-font-display.html</id>
            <content type="html">&lt;p&gt;Google I/O 2019 で Google Fonts の &lt;code&gt;font-display&lt;/code&gt; サポートが発表されたらしい！&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://fonts.googleapis.com/css?family=Noto+Sans+JP:900|Noto+Serif+JP&amp;amp;display=swap&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは嬉しい。&lt;s&gt;&lt;code&gt;font-display=swap&lt;/code&gt; を足せばいいだけ。&lt;/s&gt;&lt;br&gt;
5/14 追記: &lt;a href=&quot;https://github.com/google/fonts/issues/358#issuecomment-492091688&quot;&gt;&lt;code&gt;display=swap&lt;/code&gt; が最終的な構文に決まりました&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;まだ正式発表されてないけど、嬉しいので&lt;a href=&quot;https://github.com/uknmr/uknmr.github.io/commit/530e2114b77f943a2e0204036ea2de1982ef34fc&quot;&gt;このブログにも適用しておいた&lt;/a&gt;。これまでは &lt;a href=&quot;https://googlefonts.3perf.com/&quot;&gt;PerfPerfPerf が提供していたスニペット&lt;/a&gt;をつかっていた。&lt;a href=&quot;https://github.com/typekit/webfontloader&quot;&gt;Web Font Loader &lt;/a&gt;って手もあるけど、あれは日本語では気持ち悪すぎるよね（読みこまれた文字からグニョグニョと切り替わっていく）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.gyazo.com/47672aa5b551339ab0bd676c78a98496.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
5/14 追記: &lt;code&gt;font-display: swap&lt;/code&gt; なレスポンスが返ってくるようになった！&lt;/p&gt;
&lt;p&gt;GitHub に&lt;a href=&quot;https://github.com/google/fonts/issues/358&quot;&gt; Issue が上がってから 2 年半強&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/addyosmani/status/1126387263749799936&quot;&gt;1 年以上色んな人が関わってきた&lt;/a&gt;らしい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/addyosmani/status/1126370518347608065&quot;&gt;Addy の Twitter スレッド&lt;/a&gt;を見る限り API の変更はなさそう。嘘でした、&lt;a href=&quot;https://github.com/google/fonts/issues/358#issuecomment-491453043&quot;&gt;リリース時にはパラメーターが &lt;code&gt;font-display&lt;/code&gt; から &lt;code&gt;display&lt;/code&gt; になってるかも&lt;/a&gt;、とのこと。&lt;/p&gt;
&lt;p&gt;個人的にはデフォルトでもいいんだよ？という気持ち。これにならって他のフォント配信サービスも頑張ってほしい。&lt;/p&gt;
&lt;p&gt;あとは&lt;a href=&quot;https://caniuse.com/#feat=css-font-rendering-controls&quot;&gt; Android の WebView が対応&lt;/a&gt;すればもう日本でもあまり心配なくウェブフォントつかっていける気がする。いや、&lt;a href=&quot;https://togetter.com/li/1106385&quot;&gt;Xperia の Noto Sans / Serif JP 周りの扱い&lt;/a&gt;もどうにかしてほしい。&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>WebPagetest でサードパーティの影響を除いて計測する ⚡</title>
            <link href="https://uknmr.github.io/blog/except-3rd-party-requests-from-webpagetest.html"/>
            <updated>2019-07-13T13:43:00-00:00</updated>
            <id>https://uknmr.github.io/blog/except-3rd-party-requests-from-webpagetest.html</id>
            <content type="html">&lt;p&gt;正しくは「テスト対象の URL と同じホストへのリクエストを除いて計測する」です。ウェブパフォーマンスの計測くらい自分のコントローラブルな状態で行いたいし、そうあるべきですよね（もちろんユーザーはサードパーティスクリプト込みの体験をするし、あくまでコントローラブルな部分を計測して改善していくならば）。&lt;/p&gt;
&lt;p&gt;WebPagetest では &lt;a href=&quot;https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/scripting&quot;&gt;Scripting&lt;/a&gt; と呼ばれるマルチステップテストを行うためのスクリプトが書けます。このスクリプトに次の用に書き込むと URL と同じホストへのリクエストを除いて計測してくれます。&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;navigate %URL%&lt;br&gt;blockDomainsExcept %HOST%&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この &lt;a href=&quot;https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/scripting#TOC-blockDomainsExecpt&quot;&gt;&lt;code&gt;blockDomainsExcept&lt;/code&gt;&lt;/a&gt; は空白区切りで複数指定もできるので、例えば &lt;em&gt;&amp;quot;Google Fonts は明らかに依存しているので計測対象にしたい&amp;quot;&lt;/em&gt; とすれば次のように書くことができます。&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;navigate %URL%&lt;br&gt;blockDomainsExcept %HOST% fonts.googleapis.com fonts.gstatic.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちなみにこの方法はイギリスで WebPerf コンサルをやっている &lt;a href=&quot;https://twitter.com/AndyDavies/status/1128748618305896452/&quot;&gt;Andy Davies 氏のツイート&lt;/a&gt;で知りました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%URL%&lt;/code&gt; や &lt;code&gt;%HOST%&lt;/code&gt; 以外に使える変数がないか探しましたがよくわからず、&lt;a href=&quot;https://github.com/WPO-Foundation/webpagetest/blob/master/www/runtest.php&quot;&gt;チラッとソースを見ても&lt;/a&gt;他に使えそうなものはありませんでした。&lt;/p&gt;
&lt;p&gt;この設定は &lt;a href=&quot;https://github.com/uknmr/gas-webpagetest&quot;&gt;gas-webpagetest&lt;/a&gt; という Google Apps Script から WebPagetest を叩いて記録するツールのデフォルト設定にしようか迷ったものです。このスクリプトで正しくサードパーティを外せる訳でも、サードパーティを外すことが常に計測として正しい訳でもないので、このブログにメモして終わりにします。&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Web Share Target API を使って共有メニューからスクマするアプリを作った</title>
            <link href="https://uknmr.github.io/blog/scrapbox-with-web-share-target-api.html"/>
            <updated>2019-07-17T17:27:00-00:00</updated>
            <id>https://uknmr.github.io/blog/scrapbox-with-web-share-target-api.html</id>
            <content type="html">&lt;p&gt;via &lt;a href=&quot;https://uknmr.github.io/scma/&quot;&gt;https://uknmr.github.io/scma/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://scrapbox.io/masui/%E3%82%B9%E3%82%AF%E3%83%9E%E3%81%AE%E3%81%99%E3%81%99%E3%82%81&quot;&gt;Scrapbox でブックマーク&lt;/a&gt; することをスクマと呼ぶらしい。私は脳の外部記憶装置として &lt;a href=&quot;https://scrapbox.io/uknmr/&quot;&gt;Scrapbox&lt;/a&gt; を使っていて、先月には &lt;a href=&quot;https://scrapbox.io/uknmr/%E3%82%B9%E3%82%AF%E3%83%9E%E7%94%A8%E3%81%AE%E3%83%96%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F&quot;&gt;Pocket も Feedly Boards も使うのをやめ Scrapbox に一本化した&lt;/a&gt;ところだった。&lt;/p&gt;
&lt;p&gt;ブックマークレットでスクマに流し込んでいたが、その操作ステップの多さにストレスが溜まっていた。例えば Feedly で RSS を閲覧しているとすると、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feedly の詳細ページを最下部までスクロール&lt;/li&gt;
&lt;li&gt;Visit Website でウェブビューを開く&lt;/li&gt;
&lt;li&gt;Chrome で開く&lt;/li&gt;
&lt;li&gt;アドレスバーに「す」と打ち込みブックマークレット呼び出し&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という具合だった。これが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共有メニューからアプリ選択&lt;/li&gt;
&lt;li&gt;テキストを入力して送信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となる。正直ブックマークレットの方ができることは多いが、操作ステップは減るので良しとしたい。&lt;/p&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;p&gt;Android Chrome で使う想定です。デスクトップなら &lt;a href=&quot;https://github.com/pastak/scboloo&quot;&gt;scboloo&lt;/a&gt; を使えばいいと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://uknmr.github.io/scma/&quot;&gt;https://uknmr.github.io/scma/&lt;/a&gt; を開く&lt;/li&gt;
&lt;li&gt;A2HS する&lt;/li&gt;
&lt;li&gt;スクマしたいウェブページで共有メニューから「スクマ」を選択する&lt;/li&gt;
&lt;li&gt;PWA が立ち上がるので適当に入力して送信する&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Web Share Target API&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2018/12/web-share-target&quot;&gt;Chrome 71 から Web Share Target API&lt;/a&gt; が使えるようになった。これは Android で言うところの &lt;code&gt;Intent.ACTION_SEND&lt;/code&gt; をウェブで簡単に受け取れるようになるものだ。いまのところ Chrome でしか動作しないが、いいものなので他のプラットフォームにも早く来るといい。&lt;/p&gt;
&lt;p&gt;実装はほとんどいらず、&lt;a href=&quot;https://developers.google.com/web/fundamentals/web-app-manifest/&quot;&gt;Web App Manifest&lt;/a&gt; に &lt;code&gt;share_target&lt;/code&gt; を書くだけだった。&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;share_target&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/share-target/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;enctype&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application/x-www-form-urlencoded&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;action&lt;/code&gt; に対して &lt;code&gt;method&lt;/code&gt; で &lt;code&gt;params&lt;/code&gt; が渡って来るので、アプリ側ではそれをよしなに処理してあげれば良い。ちなみに &lt;code&gt;method&lt;/code&gt; と &lt;code&gt;enctype&lt;/code&gt; を省略するとそれぞれ &lt;code&gt;GET&lt;/code&gt; と &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; になる（省略すると DevTools の警告がうるさい）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;title&lt;/code&gt; と &lt;code&gt;text&lt;/code&gt;、&lt;code&gt;url&lt;/code&gt; の 3 つフィールドはあるが、それぞれの内容は共有する側のアプリに依存し、受け取り側では操作できない。また Android においては &lt;code&gt;url&lt;/code&gt; はサポートされていないらしい。&lt;/p&gt;
&lt;h1&gt;その他やってみたこと&lt;/h1&gt;
&lt;p&gt;基本的に自分しか使わないものなので自由に開発できてよかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://caniuse.com/#feat=es6-module&quot;&gt;ES Modules&lt;/a&gt; のブラウザ対応が進んでいたので使ってみた&lt;/li&gt;
&lt;li&gt;border-radius に 8 つの半径を指定して有機的な形を作ってみた&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/CSS/@font-face/unicode-range&quot;&gt;unicode-range&lt;/a&gt; を指定してみた（ただ指定してみたかっただけで利いてるわけではない）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;できなかったこと&lt;/h1&gt;
&lt;p&gt;API が公開されていなかったり CORS に阻まれできなかったこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://scrapbox.io/api/projects&quot;&gt;Scrapbox の project 一覧&lt;/a&gt; の取得&lt;/li&gt;
&lt;li&gt;記事から &lt;code&gt;og:image&lt;/code&gt; を抜き出して Gyazo 化し本文に挿入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここはなんとか実現したくて Firebase Functions で puppeteer を動かしてレスポンスを返す実装を書いた。が、毎回認証が走っててアホくさなったので消した。&lt;/p&gt;
&lt;h1&gt;余談&lt;/h1&gt;
&lt;p&gt;最初はなぜか &lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt; を使って実装を始め「Widget 完全に理解した」となり &lt;code&gt;Intent.ACTION_SEND&lt;/code&gt; を捌く Java コードを書いていた。&lt;em&gt;&amp;quot;共有でサクッとスクマしたいだけなんだよおおおおお&amp;quot;&lt;/em&gt; とか &lt;em&gt;&amp;quot;Flutter が楽とか言って結局ネイティブモジュール書かないと駄目じゃんかよおおおお&amp;quot;&lt;/em&gt;、となってたので &lt;a href=&quot;https://wicg.github.io/web-share-target/&quot;&gt;Web Share Target API&lt;/a&gt; のことを思い出せてよかった。&lt;/p&gt;
&lt;p&gt;あと &lt;a href=&quot;https://paul.kinlan.me/ja/web-share-target-api/&quot;&gt;Paul Kinlan 氏の紹介記事の日本語が怪しい&lt;/a&gt;ので余裕があれば&lt;a href=&quot;https://github.com/PaulKinlan/paul.kinlan.me/blob/main/content/ja/2018-04-15-share-target-api.ja.markdown&quot;&gt;ここ&lt;/a&gt;に PR を投げたい。&lt;/p&gt;
</content>
        </entry>
</feed>